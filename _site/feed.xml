<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zengxi0302&#39;s  blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://zengxi0302.github.io/</link>
    <atom:link href="http://zengxi0302.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 17 Aug 2015 00:25:36 +0800</pubDate>
    <lastBuildDate>Mon, 17 Aug 2015 00:25:36 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>一张图了解linux IO子系统</title>
        <description>&lt;p&gt;来源:&lt;a href=&quot;http://www.ilinuxkernel.com/?p=1559&quot;&gt;www.ilinuxkernel.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/linux_io_stackv1.0.png&quot; alt=&quot;iostack&quot; title=&quot;iostack&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Aug 2015 07:54:32 +0800</pubDate>
        <link>http://zengxi0302.github.io/linux/2015/08/17/iostack.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/linux/2015/08/17/iostack.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>常用的shell命令记录</title>
        <description>&lt;h2 id=&quot;find&quot;&gt;find命令&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;find / -name file		//根据name进行查找
find / -iname file		//无关大小写
find / -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;*.sh&amp;quot;&lt;/span&gt;			//通配符，正则表达式
find / -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;[A-Z]*&amp;quot;&lt;/span&gt;		//以A-Z为开头的文件

find / -size +5M				//根据size进行查找
find / -size -5M
find / -size +5M -a size -10M		//查找大于5M小于10M的文件, 条件and
find / -size +5M -o -name file	//大于5M，或名称是file，条件or

find / -atime -1				//查找1天没访问过的文件
find / -atime +30				//查找30内都天没访问过的文件
find / -amin -5 				//查找5分钟内访问过的文件
							//其它的还有ctime, mtime, cmin, mmin，
							//表示创建和修改时间，单位是天和分钟

find / -user root				//查找属主是root的文件

find / -type f 					//查找所有的文件 - &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;f 文件&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; d 目录&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; p 管道&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#find常与xargs配合使用&lt;/span&gt;
find / -size +100M &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs rm	//查找大于100M的文件，并删除

&lt;span class=&quot;c&quot;&gt;#也后跟exec跟命令执行&lt;/span&gt;
find / -type f -exec mv &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; tmp/ &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;	//将匹配的文件移动到tmp目录&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;cut&quot;&gt;cut命令&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cut -c -5 file			//取文件前5个字符
cut -c 5- file			//取文件第五个字符后的所有字符
cut -c 10-15 file		//取10-15个字符

cut -d &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f 1			//以&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;为分割符，取field 1
cut -d : -f 1,3-5,7		//以:为分割符，取1，3-5，第7个字段&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;sed&quot;&gt;sed命令&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/a/b/g&amp;quot;&lt;/span&gt; file	//将file中所有的a替换成b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;awk&quot;&gt;awk命令&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1 2 3 4 5 &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;	//取第一个字段&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 17 Aug 2015 04:54:00 +0800</pubDate>
        <link>http://zengxi0302.github.io/linux/2015/08/17/shell-command.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/linux/2015/08/17/shell-command.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Markdown常用语法标记</title>
        <description>&lt;p&gt;本文的markdown标签针对ruby实现的kramdown解释器&lt;/p&gt;

&lt;h1 id=&quot;ruby&quot;&gt;ruby代码段&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello github.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;hello github.&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;c&quot;&gt;c代码段&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;shell&quot;&gt;shell片段&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section&quot;&gt;标题示例&lt;/h1&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;h1-&quot;&gt;H1 &lt;code&gt;#&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;h2-&quot;&gt;H2 &lt;code&gt;##&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&quot;h3-&quot;&gt;H3 &lt;code&gt;###&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;h4-&quot;&gt;H4 &lt;code&gt;####&lt;/code&gt;&lt;/h4&gt;

&lt;h5 id=&quot;h5-&quot;&gt;H5 &lt;code&gt;#####&lt;/code&gt;&lt;/h5&gt;

&lt;h6 id=&quot;h6-&quot;&gt;H6 &lt;code&gt;######&lt;/code&gt;&lt;/h6&gt;

&lt;h1 id=&quot;section-1&quot;&gt;强调&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;强调1-1&lt;/em&gt; //用&lt;code&gt;*&lt;/code&gt;表示斜体&lt;/p&gt;

&lt;p&gt;&lt;em&gt;强调1-2&lt;/em&gt; //用&lt;code&gt;_&lt;/code&gt;也可以&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;强调2-1&lt;/strong&gt; //用&lt;code&gt;**&lt;/code&gt;表示粗体&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;强调2-2&lt;/strong&gt; //用&lt;code&gt;__&lt;/code&gt;也可以&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;强调3-1&lt;/em&gt;&lt;/strong&gt; //用&lt;code&gt;***&lt;/code&gt;表示斜粗体&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;强调3-2&lt;/em&gt;&lt;/strong&gt; //用&lt;code&gt;___&lt;/code&gt;也可以&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;**这是什么&lt;/strong&gt;** //四个&lt;code&gt;*&lt;/code&gt;会被重新翻译，就不用了&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;列表&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;颜色&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;红&lt;/p&gt;

    &lt;p&gt;a. 朱红&lt;/p&gt;

    &lt;p&gt;b. 酒红&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;黄&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;深黄&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;淡黄&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;引用&lt;/h1&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;这是一段引用,用&lt;code&gt;&amp;gt;&lt;/code&gt;表示&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-4&quot;&gt;字体颜色&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;em style=&quot;color:red&quot;&gt;红色&lt;/em&gt;. &lt;code&gt;*红色*{:style=&quot;color:red&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em style=&quot;color:green&quot;&gt;绿色&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em style=&quot;color:yellow&quot;&gt;黄色&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;链接&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;www.google.com&lt;/a&gt;  &lt;code&gt;[www.google.com](https://www.google.com)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;图片&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/images/github.png&quot; alt=&quot;github&quot; title=&quot;github&quot; /&gt;  &lt;code&gt;![github](/images/github.png &quot;github&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;表格&lt;/h1&gt;
&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;head1&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;head2&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;head3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;c&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;sample2&quot;&gt;sample2&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Markdown&lt;/th&gt;
      &lt;th&gt;Less&lt;/th&gt;
      &lt;th&gt;Pretty&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;renders&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;nicely&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 15:30:00 +0800</pubDate>
        <link>http://zengxi0302.github.io/%E5%86%99%E4%BD%9C/2015/07/22/markdown-syntax.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/%E5%86%99%E4%BD%9C/2015/07/22/markdown-syntax.html</guid>
        
        
        <category>写作</category>
        
      </item>
    
      <item>
        <title>IO路径解析</title>
        <description>&lt;p&gt;首先，得看发出了哪些系统调用， strace出场&lt;/p&gt;

&lt;p&gt;我们关心的两个系统调用是open和write&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;open(&amp;quot;/mnt/sdb/zengxi/iopath/hello_file&amp;quot; O_WRONLY|O_CREAT 03777701360411750) = 3	//返回值是fd的值
write(3 &amp;quot;hello world!\n&amp;quot; 13)          = 13	//返回值是write系统调用写buf的长度&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后，我们一起看看在内核里面做了什么事情&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a.out(3594) close: args: 255
a.out(3594) vfs_read parms: file=0xffff880005edc2c0 buf=0xffff880052c4c800 count=0x188 pos=0xffff88005e6e9c68
a.out(3594) open: args: &amp;quot;/etc/ld.so.cache&amp;quot; O_RDONLY
a.out(3594) vfs_fstat parms: fd=0x3 stat=0xffff88005e6e9ef8
a.out(3594) vfs_getattr parms: mnt=0xffff8801b888e180 dentry=0xffff8800137e0a20 stat=0xffff88005e6e9ef8
a.out(3594) close: args: 3
a.out(3594) open: args: &amp;quot;/lib64/libc.so.6&amp;quot; O_RDONLY
a.out(3594) read: args: 3 0x7ffcd5fa2b78 832
a.out(3594) vfs_read parms: file=0xffff8801b1c39bc0 buf=0x7ffcd5fa2b78 count=0x340 pos=0xffff88005e6e9f50
a.out(3594) vfs_fstat parms: fd=0x3 stat=0xffff88005e6e9ef8
a.out(3594) vfs_getattr parms: mnt=0xffff8801b888e180 dentry=0xffff8801b84ee3a0 stat=0xffff88005e6e9ef8
a.out(3594) close: args: 3
a.out(3594) open: args: &amp;quot;/mnt/sdb/zengxi/iopath/hello_file&amp;quot; O_WRONLY|O_CREAT 01777777777772576431770
a.out(3594) vfs_fstat parms: fd=0x1 stat=0xffff88005e6e9ef8
a.out(3594) vfs_getattr parms: mnt=0xffff8801b888e280 dentry=0xffff8801a8948250 stat=0xffff88005e6e9ef8
a.out(3594) write: args: 1 &amp;quot;the address of msg: 0x7ffcd5fa32f0 sizeof ms&amp;quot;... 51
a.out(3594) vfs_write parms: file=0xffff8801b5733580 buf=0x7f9ad453f000 count=0x33 pos=0xffff88005e6e9f50
a.out(3594) vfs_fstat parms: fd=0x0 stat=0xffff88005e6e9ef8
a.out(3594) vfs_getattr parms: mnt=0xffff8801b888e280 dentry=0xffff8801a8948250 stat=0xffff88005e6e9ef8
a.out(3594) read: args: 0 0x7f9ad453e000 1024
a.out(3594) vfs_read parms: file=0xffff8801b5733580 buf=0x7f9ad453e000 count=0x400 pos=0xffff88005e6e9f50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;hello world已经被写入到Page Cache当中&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;============================================================================================================================================
vfs_write
	generic_file_aio_write
		generic_file_direct_write	//direct写
		generic_file_buffered_write	//buffer写
			generic_perform_write
				write_begin (address_space_operations-&amp;gt;write_begin) //依据具体的文件系统定义的write_begin和write_end
					iov_iter_copy_from_user_atomic //从用户空间将buf拷贝到内核空间，相当于进入page cache					
				write_end (address_space_operations-&amp;gt;write_end)
				
			ext2/ext3/ext4
	File.c (fs\ext2):	.aio_write	= generic_file_aio_write
	File.c (fs\ext3):	.aio_write	= generic_file_aio_write
	File.c (fs\ext4):	.aio_write	= ext4_file_write
	
ocfs2
	File.c (fs\ocfs2):	.aio_write	= ocfs2_file_aio_write
============================================================================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;fluser进程刷写脏页&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;============================================================================================================================================
bdi_forker_thread
	task = kthread_create(bdi_writeback_thread &amp;amp;bdi-&amp;gt;wb &amp;quot;flush-%s&amp;quot; dev_name(bdi-&amp;gt;dev)); //backing-dev.c，创建针对块设备的flush进程

bdi_writeback_thread
	wb_do_writeback
		wb_writeback
			__writeback_inodes_sb //if （work-&amp;gt;sb）
			writeback_inodes_wb
				wb_inode 		//获取要回写的inode
				writeback_sb_inodes	//回写属于这个superblock的所有inode
					writeback_single_inode	//分解写单个inode
						do_writepages
							mapping-&amp;gt;a_ops-&amp;gt;writepages	//如果文件系统自定义了writepages的方法，调用之
							generic_writepages		//否则，使用通用的writepages方法
								__writepage
									mapping-&amp;gt;a_ops-&amp;gt;writepage	//调用文件系统自定义的写单个页面的方法，必需实现
============================================================================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;回到具体文件系统中，将page内容封装成块层需要的buffer_head和bio，向下提交&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ext2/ext3/ext4
	Inode.c (fs\ext2):	.writepage		= ext2_writepage
	Inode.c (fs\ext3):	.writepage		= ext3_writeback_writepage
	Inode.c (fs\ext4):	.writepage		= ext4_writepage	
ocfs2
	Aops.c (fs\ocfs2):	.writepage		= ocfs2_writepage
============================================================================================================================================
ext3_writeback_writepage
	block_write_full_page	//提交整个page
		block_write_full_page_endio //并注册io完成的回调函数是end_buffer_async_write
			__block_write_full_page
				mark_buffer_async_write_endio		//将page中所有的buffer_head的设置io返回回调函数（因为一个page当中可能包含多个io，每个io都需要设置end_io函数）
				submit_bh				//遍历page中的所有buffer_head，调用submit_bh提交
					_submit_bh			
						submit_bio		//提交到块层
============================================================================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;经submit_bio后，io进入到块层
进入块层之后，文件的概念就彻底消失了，只有块，准确的说是扇区。
为什么要设置块层，主要的目的是 – IO调度 (noop deadline cfq)所在的位置&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;============================================================================================================================================
submit_bio
	generic_make_request	//将io请求封装成request
		__generic_make_request
			q = bdev_get_queue(bio-&amp;gt;bi_bdev);	//获取到这个设备的请求队列(request_queue)
			ret = q-&amp;gt;make_request_fn(q bio);	//调用make_request_fn出队列
============================================================================================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 19 Jul 2015 08:04:10 +0800</pubDate>
        <link>http://zengxi0302.github.io/linux/2015/07/19/iopath.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/linux/2015/07/19/iopath.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>xenstore操作方法</title>
        <description>&lt;p&gt;XenStore是Xen提供的一个域间共享的存储系统，它以字符串形式存放了管理程序和前（frontend）、后端驱动程序(backend)的配置信息。
Dom0管理所有的数据，而DomU通过共享内存，向Dom0请求与自己相关的键值，以此实现域间通信。
Xen提供了多种接口用来操作XenStore：命令行的xenstore命令、用户空间的xs系列函数、内核的XenBus接口，都可以用来方便地操作XenStore的数据。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xenstore_operation.png&quot; alt=&quot;xenstore&quot; title=&quot;xenstore operations&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Jul 2015 07:20:00 +0800</pubDate>
        <link>http://zengxi0302.github.io/%E8%99%9A%E6%8B%9F%E5%8C%96/2015/07/18/xenstore.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/%E8%99%9A%E6%8B%9F%E5%8C%96/2015/07/18/xenstore.html</guid>
        
        
        <category>虚拟化</category>
        
      </item>
    
      <item>
        <title>用户态和内核态Makefile简单模板</title>
        <description>&lt;p&gt;用户态Makefile&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SRCS = $(wildcard *.c)
OBJS = $(SRCS:.c = .o)
CC = gcc
INCLUDES = -I/usr/include
LIBS = -L/usr/lib -lpthread
CCFLAGS = -g -Wall -O0
main : $(OBJS)
        $(CC) $^ -o $@ $(INCLUDES) $(LIBS) 
%.o : %.c
        $(CC) -c {1}lt;; $(CCFLAGS) 
clean:
        -rm *.o
        -rm main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;内核态Makefile&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;obj-m := delay_workqueue.o

PWD = $(shell pwd)
KERNELDIR = /lib/modules/$(shell uname -r)/build

default: 
    $(MAKE) -C $(KERNELDIR) M=$(PWD) modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 17 Jul 2015 08:18:32 +0800</pubDate>
        <link>http://zengxi0302.github.io/linux/2015/07/17/makefile.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/linux/2015/07/17/makefile.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>在ubuntu14.04下安装systemtap</title>
        <description>&lt;h3 id=&quot;debuginfo&quot;&gt;&lt;em&gt;获取对应内核版本的debuginfo安装包&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;首先，查询所用系统的内核版本&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;zengxi&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@zengxi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/$ uname -r&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;3.13.0-24-generic&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本人机器是ubuntu14.04，可到一下网址获取debuginfo包&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-3.13.0-24-generic-dbgsym_3.13.0-24.46_i386.ddeb&quot;&gt;http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-3.13.0-24-generic-dbgsym_3.13.0-24.46_i386.ddeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后，使用&lt;code&gt;dpkg -i linux-image-3.13.0-24-generic-dbgsym_3.13.0-24.46_i386.ddeb&lt;/code&gt;安装&lt;/p&gt;

&lt;p&gt;安装完后确认/usr/lib/debug目录下有安装的文件。&lt;/p&gt;

&lt;h3 id=&quot;systemtap&quot;&gt;&lt;em&gt;安装systemtap&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install systemtap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用命令测试一下是不是安装成功&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stap -ve &#39;probe begin { log(&quot;hello world&quot;) exit () }&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;具体systemtap的原理和介绍可参考这篇文档&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap3/index.html&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap3/index.html&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jul 2015 07:54:32 +0800</pubDate>
        <link>http://zengxi0302.github.io/linux/2015/07/17/systemtap-on-ubuntu14.04.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/linux/2015/07/17/systemtap-on-ubuntu14.04.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>this is a test</title>
        <description>&lt;p&gt;这是第一篇测试文章 - &lt;code&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lufei.png&quot; alt=&quot;lufei&quot; title=&quot;katong lufei&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello github.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;hello github.&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 16 Jul 2015 07:54:32 +0800</pubDate>
        <link>http://zengxi0302.github.io/test/2015/07/16/test.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/test/2015/07/16/test.html</guid>
        
        
        <category>test</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Apr 2015 19:23:32 +0800</pubDate>
        <link>http://zengxi0302.github.io/jekyll/2015/04/09/welcome-to-jekyll%20copy.html</link>
        <guid isPermaLink="true">http://zengxi0302.github.io/jekyll/2015/04/09/welcome-to-jekyll%20copy.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
